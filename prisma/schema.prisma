// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model role {
  id      Int     @id @default(autoincrement())
  name    String
  kh_name String
  Users   Users[]
}

model Users {
  id        Int       @id @default(autoincrement())
  // uid String
  username  String
  firstname String
  lastname  String
  email     String
  tel       String?
  avatar    String?   @default("null")
  genderid  Int
  dob       DateTime?
  created   DateTime  @default(now())
  password  String
  roleid    Int?
  role      role?     @relation(fields: [roleid], references: [id])
  gender    gender?   @relation(fields: [genderid], references: [id])

  payments payment_method[]
}

model payment_method {
  id          Int    @id @default(autoincrement())
  card_number String
  exp_month   Int
  exp_year    Int
  cvv         String
  name_onCard String
  users       Users  @relation(fields: [userId], references: [id])
  userId      Int

  orders order[]
}

model gender {
  id      Int     @id @default(autoincrement())
  name    String
  kh_name String
  Users   Users[]
}

model order {
  id                  Int             @id @default(autoincrement())
  rid                 String          @unique
  total               Decimal
  taxes               Int
  created             DateTime        @default(now())
  user_id             Int
  shipping_address_id Int
  payment_method      payment_method? @relation(fields: [payment_methodId], references: [id])
  payment_methodId    Int?
  sub_total           Decimal
  order_details       order_detail[]
  pickupOpt           pickupOpt?      @relation(fields: [pickupOptId], references: [id])
  pickupOptId         Int?
  coupon              coupon?         @relation(fields: [couponId], references: [id])
  couponId            Int?
}

model order_detail {
  id       Int      @id @default(autoincrement())
  pid      String
  quantity String
  total    Decimal
  created  DateTime @default(now())
  // discount  Int
  rid      String
  order    order?   @relation(fields: [rid], references: [rid])
  product  product? @relation(fields: [pid], references: [pid])
}

model product {
  id            Int            @id @default(autoincrement())
  pid           String         @unique
  name          String
  price         Decimal
  created       DateTime       @default(now())
  updated       DateTime       @updatedAt
  cid           String
  image         String
  order_details order_detail[]
  sizes         size[]
  category      category?      @relation(fields: [cid], references: [cid])
}

model size {
  id      Int      @id @default(autoincrement())
  label   String
  pid     String
  image   String
  product product? @relation(fields: [pid], references: [pid])
}

model category {
  id       Int       @id @default(autoincrement())
  name     String
  created  DateTime  @default(now())
  updated  DateTime  @updatedAt
  cid      String    @unique
  products product[]
}

model coupon {
  id         Int      @id @default(autoincrement())
  code       String
  percent    Decimal
  exp        DateTime
  start_date DateTime
  orders     order[]
}

model pickupOpt {
  id     Int      @id @default(autoincrement())
  name   String
  create DateTime @default(now())
  orders order[]
}

model country {
  id        Int        @id @default(autoincrement())
  name      String
  kh_name   String
  created   DateTime
  updated   Int
  provinces province[]
  districts distric[]
  communes  commune[]

  addresss address[]
}

model province {
  id        Int      @id @default(autoincrement())
  name      String
  kh_name   String
  created   DateTime
  updated   Int
  country   country? @relation(fields: [countryId], references: [id])
  countryId Int?

  districts distric[]
  communes  commune[]
  addresss  address[]
}

model distric {
  id         Int       @id @default(autoincrement())
  name       String
  kh_name    String
  created    DateTime
  updated    Int
  country    country?  @relation(fields: [countryId], references: [id])
  countryId  Int?
  province   province? @relation(fields: [provinceId], references: [id])
  provinceId Int?
  communes   commune[]
  addresss   address[]
}

model commune {
  id         Int       @id @default(autoincrement())
  name       String
  kh_name    String
  created    DateTime
  updated    DateTime
  country    country?  @relation(fields: [countryId], references: [id])
  countryId  Int?
  province   province? @relation(fields: [provinceId], references: [id])
  provinceId Int?
  distric    distric?  @relation(fields: [districId], references: [id])
  districId  Int?
  addresss   address[]
}

model address {
  id         Int       @id @default(autoincrement())
  name       String
  kh_name    String
  address    String
  country    country?  @relation(fields: [countryId], references: [id])
  countryId  Int?
  province   province? @relation(fields: [provinceId], references: [id])
  provinceId Int?
  distric    distric?  @relation(fields: [districId], references: [id])
  districId  Int?
  commune    commune?  @relation(fields: [communeId], references: [id])
  communeId  Int?

  created DateTime @default(now())
  updated DateTime @default(now())
}

model contact {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  message String
  created DateTime @default(now())
  updated DateTime @default(now())
}

// model pickup {

// }
